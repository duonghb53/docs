# NEAR Protocol Documentation

> NEAR is a layer-1 blockchain built for scale and multichain compatibility, featuring AI-native infrastructure and chain abstraction capabilities. This documentation covers smart contracts, Web3 applications, AI agents, cross-chain development, and the complete NEAR ecosystem.

NEAR Protocol is a proof-of-stake blockchain that enables developers to build decentralized applications with seamless user experiences. Key features include human-readable account names, minimal transaction fees, and built-in developer tools. The platform supports multiple programming languages and provides chain abstraction for cross-blockchain interactions.

This documentation is organized into several main sections: Protocol fundamentals, AI and agent development, chain abstraction features, smart contract development, Web3 application building, and comprehensive API references. Each section includes tutorials, examples, and detailed technical specifications.

## Core Protocol

- [Access Keys](https://docs.near.org/protocol/access-keys) : In most blockchains, users control their accounts by holding a single private key (a secret only they know) and using it to sign transactions.
- [Address (Account ID)](https://docs.near.org/protocol/account-id) : NEAR accounts are identified by a unique address, which takes one of two forms:
- [Anatomy of a Transaction](https://docs.near.org/protocol/transaction-anatomy) : A transaction is a request from a user to the network to perform a set of actions. To create a transaction, the user must specify the following fields:
- [Avoiding Token Loss](https://docs.near.org/protocol/network/token-loss) : Avoiding Token Loss
- [Decentralized Storage Solutions](https://docs.near.org/protocol/storage/decentralized-storage) : Alternative Solutions
- [Epoch](https://docs.near.org/protocol/network/epoch) : An epoch is a unit of time when validators of the network remain constant. It is measured in blocks:
- [Gas (Execution Fees)](https://docs.near.org/protocol/gas) : On every transaction the NEAR network charges a tiny fee known as gas. This fee is a simple mechanism that allows us to:
- [Lifecycle of a Transaction](https://docs.near.org/protocol/transaction-execution) : Transactions are constructed by users to express the intent of performing actions in the network. Once in the network, transactions are converted into Receipts, which are messages exchanged between network nodes.
- [NEAR Accounts](https://docs.near.org/protocol/account-model) : Overview
- [NEAR Data Flow](https://docs.near.org/protocol/data-flow/near-data-flow) : NEAR Data Flow

## AI and Agents

- [AI and NEAR](https://docs.near.org/ai/introduction) : Introduction
- [Shade Agents](https://docs.near.org/ai/shade-agents/introduction) : What are Shade Agents?
- [Components](https://docs.near.org/ai/shade-agents/production/components) : In this section, well explore the main components of a Shade Agent and how you can modify this template to build your own agent.
- [Components](https://docs.near.org/ai/shade-agents/sandbox/components) : In this section, well explore the main components of the Shade Agent sandbox and how you can modify the sandbox template to build your own agent.
- [Deploying to Production](https://docs.near.org/ai/shade-agents/production/deploying) : In this section well walk through deploying your first Shade Agent. The template were using is a simple Shade Agent built with NextJS that acts as a verifiable ETH price oracle. It takes prices from two different APIs, takes the average and then pushes the price to an Ethereum contract.
- [Examples](https://docs.near.org/ai/shade-agents/examples) : With their extensive list of features, Shade Agents unlock a wide range of new use cases, enable many previously centralized apps to become decentralized, and change how blockchain applications are designed.
- [Plugins](https://docs.near.org/ai/shade-agents/plugins) : Docs for integrating LLMs and Twitter APIs into your Shade Agent will be coming soon.
- [Using the Sandbox](https://docs.near.org/ai/shade-agents/sandbox/deploying) : Using the Sandbox

## Chain Abstraction

- [What is Chain Abstraction?](https://docs.near.org/chain-abstraction/what-is) : Blockchain development today faces a critical challenge: users need to understand complex blockchain concepts, manage multiple wallets, and deal with different networks just to use basic applications. Chain abstraction solves this by making blockchain technology invisible to end users while preserving all of the underlying benefits.
- [Building a Meta Transaction Relayer](https://docs.near.org/chain-abstraction/meta-transactions) : Building a Relayer
- [FastAuth SDK](https://docs.near.org/chain-abstraction/fastauth-sdk) : FastAuth (Email Login)
- [Getting Started with Chain Signatures](https://docs.near.org/chain-abstraction/chain-signatures/getting-started) : Chain Signatures is a groundbreaking technology built on NEAR that enables all accounts, including smart contracts, to sign and execute transactions across multiple blockchains.
- [How Omni Bridge Works](https://docs.near.org/chain-abstraction/omnibridge/how-it-works) : How It Works
- [Implementation Details](https://docs.near.org/chain-abstraction/omnibridge/implementation) : Implementation Details
- [Implementing Chain Signatures](https://docs.near.org/chain-abstraction/chain-signatures/implementation) : Chain signatures enable NEAR accounts, including smart contracts, to sign and execute transactions across many blockchain protocols.
- [Meta Transactions](https://docs.near.org/chain-abstraction/meta-tx) : NEP-366
- [NEAR Intents](https://docs.near.org/chain-abstraction/intents/overview) : NEAR Intents
- [NFT Chain Keys Smart Contract](https://docs.near.org/chain-abstraction/nft-keys) : NFT Chain Keys Contract

## Smart Contracts

- [What is a Smart Contract?](https://docs.near.org/smart-contracts/what-is) : What is a Contract?
- [Introduction](https://docs.near.org/smart-contracts/testing/introduction) : While developing your smart contract you will want to test that it works as it is supposed to, and moreover, does so securely. In NEAR we have developed tools to help you carry out such tests. Basically, there are two types of tests you can perform:
- [Basic Anatomy](https://docs.near.org/smart-contracts/anatomy/anatomy) : Lets illustrate the basic anatomy of a simple "Hello World" contract. The code on this page comes from our Hello NEAR repository on GitHub.
- [Best Practices](https://docs.near.org/smart-contracts/anatomy/best-practices) : Here we lay out some best practices for writing smart contracts on NEAR, such as:
- [Callbacks](https://docs.near.org/smart-contracts/security/callbacks) : While writing cross-contract calls there is a significant aspect to keep in mind: all the calls are independent and asynchronous. In other words:
- [Checklist](https://docs.near.org/smart-contracts/security/checklist) : Once you finished developing your smart contract please go through the following list in order to ensure everything is safe for the end user.
- [Collections](https://docs.near.org/smart-contracts/anatomy/collections) : When deciding on data structures it is important to understand their tradeoffs. Choosing the wrong structure can create a bottleneck as the application scales, and migrating the state to the new data structures will come at a cost.
- [Creating a Local Development Environment](https://docs.near.org/smart-contracts/testing/kurtosis-localnet) : Local Development
- [Cross-Contract Calls](https://docs.near.org/smart-contracts/anatomy/crosscontract) : Your contract can interact with other deployed contracts, querying information and executing functions on them.
- [Ensure it is the User (1yⓃ)](https://docs.near.org/smart-contracts/security/one_yocto) : NEAR uses a system of Access Keys to simplify handling accounts.

## Web3 Applications

- [What are Web3 Apps?](https://docs.near.org/web3-apps/what-is) : Web3 Applications - also known as decentralized apps (dApps) - leverage smart contracts and blockchain data to offer transparency, security and giving back control to users over their assets and data.
- [AI Assistant](https://docs.near.org/web3-apps/ai/ai-assistant) : Welcome! In this guide, youll discover an AI chatbot that can interact with the NEAR ecosystem
- [Authenticate NEAR Users](https://docs.near.org/web3-apps/backend/backend) : Recently NEAR has approved a new standard that, among other things, enables users to authenticate into a backend service.
- [Hello WebApp](https://docs.near.org/web3-apps/quickstart) : Quickstart ✨
- [How to integrate Ethereum Wallets to Near DApps?](https://docs.near.org/web3-apps/ethereum-wallets) : Ethereum Wallets on Near
- [Integrating Contracts](https://docs.near.org/web3-apps/integrate-contracts) : To integrate NEAR to your frontend, you will leverage two tools:

## Tokens and Primitives

- [What are Primitives?](https://docs.near.org/primitives/what-is) : Primitives are fundamental building blocks that can be combined to create a fully functional application. Blockchain primitives include Fungible Tokens (FT), Non Fungible Tokens (NFT), Decentralized Autonomous organizations (DAO), Link Drops and more.
- [Decentralized Autonomous Organizations](https://docs.near.org/primitives/dao) : Autonomous Organizations (DAO)
- [Decentralized Exchanges (DEX)](https://docs.near.org/primitives/dex) : A Decentralized Exchange (DEX) is an application that allows users to trade tokens (native & fungible tokens) through smart contracts.
- [Fungible Tokens (FT)](https://docs.near.org/primitives/ft) : Besides the native NEAR token, NEAR accounts have access to a multitude of tokens to use throughout the ecosystem. Moreover, it is even possible for users to create their own fungible tokens.
- [Linkdrops](https://docs.near.org/primitives/linkdrop) : Linkdrops allow users to distribute assets and onboard people to Web3 apps through a simple web link.
- [Non-Fungible Tokens (NFT)](https://docs.near.org/primitives/nft) : In contrast with fungible tokens, non-fungible tokens (NFT) are unitary and therefore unique. This makes NFTs ideal to represent ownership of assets such as a piece of digital content, or a ticket for an event.
- [Oracles](https://docs.near.org/primitives/oracles) : Blockchain Oracles serve as intermediaries that connect smart contracts with external (off-chain) data.

## Developer Tools

- [Data APIs](https://docs.near.org/tools/ecosystem-apis) : Introduction
- [Clear Contract State](https://docs.near.org/tools/clear-state) : This simple command-line tool allows you to clean up the state of a NEAR account without deleting it.
- [Explorer](https://docs.near.org/tools/explorer) : Explorers
- [FastNEAR](https://docs.near.org/tools/ecosystem-apis/fastnear-api) : FastNEAR allows to easily query the NEAR blockchain to get an accounts assets, map keys into account IDs, explore a blocks transactions, etc.
- [Indexing Solutions on NEAR](https://docs.near.org/tools/indexing-tools) : Indexing Solutions
- [NEAR API](https://docs.near.org/tools/near-api) : NEAR API
- [NEAR CLI](https://docs.near.org/tools/cli) : The NEAR Command Line Interface (CLI) is a tool that enables to interact with the NEAR network directly from the shell. Among other things, the NEAR CLI enables you to:
- [NEAR SDK](https://docs.near.org/tools/sdk) : The NEAR SDK is a library that allow to develop smart contracts. Currently, there exist two versions of NEAR SDK: one for Rust and one for JavaScript.
- [NearBlocks](https://docs.near.org/tools/ecosystem-apis/nearblocks-api) : NearBlocks provides an endpoint to query actions that happened on a NEAR account, possible use cases include:
- [Pikespeak](https://docs.near.org/tools/ecosystem-apis/pikespeak-api) : Pikespeak allows you to fetch blockchain events and aggregated analytics on wallets, validators, delegators, money transfers, dApps activity, and more.

## Tutorials and Examples

- [A Step-by-Step Guide to Mastering NEAR](https://docs.near.org/tutorials/auction/0-intro) : Introduction
- [Abstract DAO: Requests](https://docs.near.org/tutorials/multichain-dao/1-request) : The Abstract DAO contract works as an intermediary between decentralized organizations in NEAR and EVM networks. To better understand how it works it is better to start by using it by itself, without using a DAO yet.
- [Abstract Dao: Signatures](https://docs.near.org/tutorials/multichain-dao/2-signing) : In the previous section, we saw how to register a signature request on the Abstract DAO contract. Now, it is time to sign the transaction for different chains and relay it to the target EVM network.
- [Add a simple frontend to the crossword puzzle that checks the solution's hash](https://docs.near.org/tutorials/crosswords/01-basics/04-simple-frontend) : Add simple frontend
- [Adding a new puzzle now that we're using a collection that can contain multiple crossword puzzles](https://docs.near.org/tutorials/crosswords/02-beginner/04-adding-a-puzzle) : Add a puzzle
- [Adding cross-contract calls, access key shuffling, etc.](https://docs.near.org/tutorials/crosswords/03-intermediate/04-cross-contract-calls) : Cross-contract calls, etc.
- [Alter the smart contract, learning about basics of development](https://docs.near.org/tutorials/crosswords/01-basics/02-add-functions-call) : Add basic code, create a subaccount, and call methods
- [Approvals](https://docs.near.org/tutorials/nfts/5-approval) : Approvals
- [Approvals](https://docs.near.org/tutorials/nfts/js/5-approval) : Approvals
- [Auction factory](https://docs.near.org/tutorials/auction/4-factory) : Auction Factory
- [Basic Auction](https://docs.near.org/tutorials/auction/1.1-basic) : In this section, we will analyze a simple auction contract, which allows users to place bids, track the highest bidder and claim tokens at the end of the auction. After, we will cover how to test the contract, as well as how to deploy it on testnet.
- [Basics overview laying out what will be accomplished in this first section.](https://docs.near.org/tutorials/crosswords/01-basics/00-overview) : Crossword Game Overview
- [Bidding with FTs](https://docs.near.org/tutorials/auction/3.2-ft) : To further develop this contract we will introduce another primitive: fungible tokens. Instead of placing bids in $NEAR tokens, they will be placed in FTs. This may be useful if, for example, an auctioneer wants to keep the bid amounts constant in terms of dollars as an auction is carried out, so bids can be placed in stablecoins such as $USDC. Another use case is if a project like Ref Finance was holding its own auction and wanted the auction to happen in its projects token $REF.
- [Coin Flip](https://docs.near.org/tutorials/examples/coin-flip) : Coin Flip is a game where the player tries to guess the outcome of a coin flip. It is one of the simplest contracts implementing random numbers.
- [Complex Cross-Contract Calls](https://docs.near.org/tutorials/examples/advanced-xcc) : This example presents 3 instances of complex cross-contract calls. Particularly, it shows:

## API Reference

- [NEAR RPC API](https://docs.near.org/api/rpc/introduction) : Home
- [Access Keys](https://docs.near.org/api/rpc/access-keys) : The RPC API enables you to retrieve information about an accounts access keys.
- [Accounts / Contracts](https://docs.near.org/api/rpc/contracts) : The RPC API enables you to view details about accounts and contracts as well as perform contract calls.
- [Block / Chunk](https://docs.near.org/api/rpc/block-chunk) : The RPC API enables you to query the network and get details about specific blocks or chunks.
- [Gas](https://docs.near.org/api/rpc/gas) : The RPC API enables you to query the gas price for a specific block or hash.
- [Maintenance Windows](https://docs.near.org/api/rpc/maintenance-windows) : The RPC API enables you to query future maintenance windows for a specific validator
- [Network](https://docs.near.org/api/rpc/network) : The RPC API enables you to query status information for nodes and validators.
- [Protocol](https://docs.near.org/api/rpc/protocol) : The RPC API enables you to retrieve the current genesis and protocol configuration.
- [RPC Endpoints](https://docs.near.org/api/rpc/transactions) : Transactions
- [RPC Providers](https://docs.near.org/api/rpc/providers) : There are multiple RPC providers from which you can choose from. These providers will work as intermediaries to help you interact with the NEAR network.
- [Setup](https://docs.near.org/api/rpc/setup) : In order to use the RPC API you will need to setup the correct RPC endpoints.

## Data Infrastructure

- [What is Data Infrastructure?](https://docs.near.org/data-infrastructure/what-is) : NEAR offers ready-to-use solutions to access and monitor on-chain data easily. This is very useful to automate actions based on specific events, cache data to reduce latency, gather usage data of the blockchain, and even study user preferences.
- [`Block` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/block.mdx) : Block
- [`Chunk` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/chunk.mdx) : Chunk
- [`ExecutionOutcome` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/execution_outcome.mdx) : ExecutionOutcome
- [`Receipt` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/receipt.mdx) : Receipt
- [`Shard` structure](https://docs.near.org/data-infrastructure/lake-data-structures/shard.mdx) : Shard
- [`StateChange` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/state_change.mdx) : StateChange
- [`Transaction` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/transaction.mdx) : Transaction
- [BigQuery Public Dataset](https://docs.near.org/data-infrastructure/big-query) : BigQuery
- [Building an NFT indexer](https://docs.near.org/data-infrastructure/lake-framework/building-indexers/nft-indexer) : NFT Indexer

## Integration Examples

- [Introduction](https://docs.near.org/integrations/errors/introduction) : The NEAR Platform overview clarifies much of the language in this section.
- [Accounts](https://docs.near.org/integrations/accounts) : Please see the documentation for accounts for basic information.
- [Balance changes](https://docs.near.org/integrations/balance) : Balance Changes
- [Create Transactions](https://docs.near.org/integrations/create-transactions) : To construct & process transactions you will need our API JavaScript library: near-api-js. There are many ways to create transactions but for this example well show you two ways to create a simple token transfer transaction.
- [Error Implementation](https://docs.near.org/integrations/errors/error-implementation) : This page provides a very high level, sometimes "pseudocode", view of error types and related messages as implemented by the NEAR platform.
- [Exchange Integration](https://docs.near.org/integrations/exchange-integration) : Exchange Integration
- [Implicit Accounts](https://docs.near.org/integrations/implicit-accounts) : Implicit accounts work similarly to Bitcoin/Ethereum accounts.
- [Integrator FAQ](https://docs.near.org/integrations/faq) : Integrator FAQ
- [Token Loss](https://docs.near.org/integrations/errors/token-loss) : Careful! Losing tokens means losing money!
- [Tokens](https://docs.near.org/integrations/tokens) : - Introduction

## Resources

- [Contracts List](https://docs.near.org/resources/contracts-list) : List of contracts of various projects deployed on NEAR. This list is not exhaustive and is meant to be a reference for developers and users

