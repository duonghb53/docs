# NEAR Protocol Documentation

> NEAR is a layer-1 blockchain built for scale and multichain compatibility, featuring AI-native infrastructure and chain abstraction capabilities. This documentation covers smart contracts, Web3 applications, AI agents, cross-chain development, and the complete NEAR ecosystem.

NEAR Protocol is a proof-of-stake blockchain that enables developers to build decentralized applications with seamless user experiences. Key features include human-readable account names, minimal transaction fees, and built-in developer tools. The platform supports multiple programming languages and provides chain abstraction for cross-blockchain interactions.

This documentation is organized into several main sections: Protocol fundamentals, AI and agent development, chain abstraction features, smart contract development, Web3 application building, and comprehensive API references. Each section includes tutorials, examples, and detailed technical specifications.

## Core Protocol

- [Access Keys](https://docs.near.org/protocol/access-keys) : In most blockchains, users control their accounts by holding a single private key (a secret only they know) and using it to sign transactions.
- [Address (Account ID)](https://docs.near.org/protocol/account-id) : NEAR accounts are identified by a unique address, which takes one of two forms: 1. Implicit address, which are 64 characters long (e.g. fb9243ce...) 2. Named address, which act as domains (e.g. alice.near) You have multiple ways to create an account, you can sign-up using your email, get a mobile wallet through telegram, or create a web wallet.
- [Anatomy of a Transaction](https://docs.near.org/protocol/transaction-anatomy) : A transaction is a request from a user to the network to perform a set of actions. To create a transaction, the user must specify the following fields: - Signer: the account that signs the transaction - Actions: the set of actions to be performed (see below) - Receiver: the account on which to perform the actions In addition, a transaction has the following fields to ensure its integrity and validity: - PublicKey: the public key used to sign the transaction (so the network can verify the signature) - Nonce: a number that is incremented for each transaction sent by the Signer - BlockHash: the hash of a recent block, to limit the time-validity of the transaction Users create transactions and sign them with their private keys. Then, the transaction and its signature are broadcast together to the network, where they are validated and processed.
- [Avoiding Token Loss](https://docs.near.org/protocol/network/token-loss) : Careful! Losing tokens means losing money! Token loss is possible under multiple scenarios. These scenarios can be grouped into a few related classes: 1. Improper key management 2. Refunding deleted accounts 3. Failed function calls in batches Improper key management may lead to token loss. Mitigating such scenarios may be done by issuing backup keys allowing for recovery of accounts whose keys have been lost or deleted.
- [Decentralized Storage Solutions](https://docs.near.org/protocol/storage/decentralized-storage) : > In this article youll find a brief overview of different decentralized storage solutions that can be integrated into your decentralized applications (dApps). This will allow you to store large amounts of data using a more economical alternative to native NEAR storage.
- [Epoch](https://docs.near.org/protocol/network/epoch) : An epoch is a unit of time when validators of the network remain constant. It is measured in blocks: - Both testnet and mainnet have an epoch duration of 43,200 blocks. Ideally epochs last about 12 hours, since blocks are created every second (in reality, they take slightly longer to be created).
- [Gas (Execution Fees)](https://docs.near.org/protocol/gas) : On every transaction the NEAR network charges a tiny fee known as gas. This fee is a simple mechanism that allows us to: 1. Prevent bad actors from spamming the network with useless transactions 2. Burn a minuscule fraction of the token supply on each transaction 3. Incentivize developers by giving contracts 30% of the gas they burn while executing 4. Implement a wall time by capping transactions to 300Tgas (~300ms of compute time) Gas in NEAR is computed on gas units and charged using $NEAR tokens based on the networks gas price.
- [Lifecycle of a Transaction](https://docs.near.org/protocol/transaction-execution) : Transactions are constructed by users to express the intent of performing actions in the network. Once in the network, transactions are converted into Receipts, which are messages exchanged between network nodes.
- [NEAR Accounts](https://docs.near.org/protocol/account-model) : Users participate in the NEAR ecosystem through their NEAR accounts. These accounts are identified by a unique address, can optionally hold a smart contract, and are controlled through Access Keys.
- [NEAR Data Flow](https://docs.near.org/protocol/data-flow/near-data-flow) : In this video we give a quick overview on the main concept of how the data flows across the NEAR Protocol blockchain.

## AI and Agents

- [AI and NEAR](https://docs.near.org/ai/introduction) : NEARs vision is to create a future of User-Owned AI, where AI and agents serve their users, not corporations. For this vision to become a reality, AI must protect user data, prioritize the users interests, and operate on a sustainable, user-aligned economic model. The NEAR ecosystem has multiple technologies to enable User-Owned AI.
- [Shade Agents](https://docs.near.org/ai/shade-agents/introduction) : The shade agent framework allows developers to build decentralized and trustless AI agents that control accounts and assets across multiple blockchains.
- [Deploying an Agent](https://docs.near.org/ai/shade-agents/production/deploying) : In this section well walk through deploying your first Shade Agent. The template were using is a simple Shade Agent built with NextJS that acts as a verifiable ETH price oracle. It takes prices from two different APIs, takes the average and then pushes the price to an Ethereum contract.
- [Key Components](https://docs.near.org/ai/shade-agents/production/components) : In this section, well explore the main components of a Shade Agent and how you can modify this template to build your own agent.
- [Sandbox Components](https://docs.near.org/ai/shade-agents/sandbox/components) : In this section, well explore the main components of the Shade Agent sandbox and how you can modify the sandbox template to build your own agent.
- [Shade Agent Plugins](https://docs.near.org/ai/shade-agents/plugins) : Docs for integrating LLMs and Twitter APIs into your Shade Agent will be coming soon.
- [Using the Sandbox](https://docs.near.org/ai/shade-agents/sandbox/deploying) : The Shade Agent Sandbox is a development workflow that allows you to get up and running with Shade Agents as quickly as possible with minimum prerequisites.
- [What can you Build?](https://docs.near.org/ai/shade-agents/examples) : With their extensive list of features, Shade Agents unlock a wide range of new use cases, enable many previously centralized apps to become decentralized, and change how blockchain applications are designed.

## Chain Abstraction

- [What is Chain Abstraction?](https://docs.near.org/chain-abstraction/what-is) : Blockchain development today faces a critical challenge: users need to understand complex blockchain concepts, manage multiple wallets, and deal with different networks just to use basic applications. Chain abstraction solves this by making blockchain technology invisible to end users while preserving all of the underlying benefits.
- [Building a Meta Transaction Relayer](https://docs.near.org/chain-abstraction/meta-transactions) : Relayers serve to delegate gas fees to a web service, allowing users to transact on NEAR without the need to acquire the token themselves while still retaining the security of signing their own transactions. This guide will lead you through the components necessary to construct a relayer capable of handling meta transactions.
- [FastAuth SDK](https://docs.near.org/chain-abstraction/fastauth-sdk) : FastAuth is a key management system that allows users to recover or sign-up for a NEAR account using their email address.
- [Getting Started with Chain Signatures](https://docs.near.org/chain-abstraction/chain-signatures/getting-started) : Chain Signatures is a groundbreaking technology built on NEAR that enables all accounts, including smart contracts, to sign and execute transactions across multiple blockchains.
- [How Omni Bridge Works](https://docs.near.org/chain-abstraction/omnibridge/how-it-works) : The journey toward truly trustless cross-chain communication took a significant leap forward when the NEAR team created the first trustless bridge with Ethereum (Rainbow Bridge). This pioneering achievement demonstrated that completely trustless cross-chain communication was possible, marking a crucial step toward the vision of chain abstraction. However, this approach relied on implementing a NEAR light client directly on Ethereum - essentially requiring Ethereum to understand and verify NEARs complex blockchain rules.
- [Implementation Details](https://docs.near.org/chain-abstraction/omnibridge/implementation) : The Omni Bridge is a sophisticated cross-chain bridge infrastructure that enables secure and efficient token transfers between NEAR Protocol and various other blockchain networks. This document provides a detailed technical overview of the bridges architecture, covering its core components, security model, and operational mechanisms. By leveraging a combination of Multi-Party Computation (MPC), chain-specific light clients, and a permissionless relayer network, the bridge achieves a robust balance of security, decentralization, and user experience.
- [Implementing Chain Signatures](https://docs.near.org/chain-abstraction/chain-signatures/implementation) : Chain signatures enable NEAR accounts, including smart contracts, to sign and execute transactions across many blockchain protocols.
- [Meta Transactions](https://docs.near.org/chain-abstraction/meta-tx) : NEP-366 introduced the concept of meta transactions to Near Protocol. This feature allows users to execute transactions on NEAR without owning any gas or tokens. In order to enable this, users construct and sign transactions off-chain. A third party (the relayer) is used to cover the fees of submitting and executing the transaction.
- [NEAR Intents](https://docs.near.org/chain-abstraction/intents/overview) : NEAR Intents is a multichain transaction protocol where users specify what they want and let third parties compete to provide the best solution. This works for everything from token swaps to pizza delivery, creating a universal marketplace across crypto and traditional services.
- [NFT Chain Keys Smart Contract](https://docs.near.org/chain-abstraction/nft-keys) : The NFT Chain Keys smart contract makes the ownership of remote accounts both provable and transferrable. This new paradigm allows you to create new end-user experiences that leverage provable and transferrable remote accounts as a core primitive.

## Smart Contracts

- [What is a Smart Contract?](https://docs.near.org/smart-contracts/what-is) : Smart contracts are pieces of executable code that live in a NEAR account. They can store data, perform transactions in the account’s name, and expose methods so other accounts can interact with them.
- [Introduction](https://docs.near.org/smart-contracts/testing/introduction) : While developing your smart contract you will want to test that it works as it is supposed to, and moreover, does so securely. In NEAR we have developed tools to help you carry out such tests. Basically, there are two types of tests you can perform: 1. Unit Tests to test methods individually. They are written in the contracts language and are executed locally.
- [✅ Checklist](https://docs.near.org/smart-contracts/security/checklist) : Once you finished developing your smart contract please go through the following list in order to ensure everything is safe for the end user.
- [Basic Anatomy](https://docs.near.org/smart-contracts/anatomy/anatomy) : Lets illustrate the basic anatomy of a simple "Hello World" contract. The code on this page comes from our Hello NEAR repository on GitHub.
- [Best Practices](https://docs.near.org/smart-contracts/anatomy/best-practices) : Here we lay out some best practices for writing smart contracts on NEAR, such as: - Enable overflow checks - Use require! early - Use log!
- [Collections](https://docs.near.org/smart-contracts/anatomy/collections) : When deciding on data structures it is important to understand their tradeoffs. Choosing the wrong structure can create a bottleneck as the application scales, and migrating the state to the new data structures will come at a cost.
- [Creating a Local Development Environment](https://docs.near.org/smart-contracts/testing/kurtosis-localnet) : > Kurtosis has created an easy way to spin up a local NEAR testing environment using a Docker container.
- [Cross-Contract Calls](https://docs.near.org/smart-contracts/anatomy/crosscontract) : Your contract can interact with other deployed contracts, querying information and executing functions on them.
- [Cross-Contract Calls](https://docs.near.org/smart-contracts/security/callbacks) : While writing cross-contract calls there is a significant aspect to keep in mind: all the calls are independent and asynchronous. In other words: - The method in which you make the call and method for the callback are independent.
- [Ensure it is the User (1yⓃ)](https://docs.near.org/smart-contracts/security/one_yocto) : NEAR uses a system of Access Keys to simplify handling accounts. There are basically two type of keys: Full Access, that have full control over an account (i.e. can perform all actions), and Function Call, that only have permission to call a specified smart contracts method(s) that do not attach Ⓝ as a deposit.

## Web3 Applications

- [What are Web3 Apps?](https://docs.near.org/web3-apps/what-is) : Web3 Applications - also known as decentralized apps (dApps) - leverage smart contracts and blockchain data to offer transparency, security and giving back control to users over their assets and data.
- [AI Assistant](https://docs.near.org/web3-apps/ai/ai-assistant) : Welcome! In this guide, youll discover an AI chatbot that can interact with the NEAR ecosystem This AI agent can: - Explore and explain what happened in a transaction when given a transaction hash - Request tokens from the testnet faucet - Mint and send a special NFT though a wallet it controls to a user - Answer general questions about the NEAR architecture (powered by realtime search results) Created by our community member Reza, this project was one of our AI track winners at the ETHGlobal Brussels 2024 hackathon Lets start by setting up the environment to run the AI assistant locally.
- [Authenticate NEAR Users](https://docs.near.org/web3-apps/backend/backend) : Recently NEAR has approved a new standard that, among other things, enables users to authenticate into a backend service.
- [Hello WebApp](https://docs.near.org/web3-apps/quickstart) : In this guide we will show you how to quickly spin up a frontend where users can login using their wallets and interact with a contract.
- [How to integrate Ethereum Wallets to Near DApps?](https://docs.near.org/web3-apps/ethereum-wallets) : In this article we will describe how to add EVM wallets support to your Near app, which is already uses the Near Wallet Selector.
- [Integrating Contracts](https://docs.near.org/web3-apps/integrate-contracts) : To integrate NEAR to your frontend, you will leverage two tools: 1. Wallet Selector: Enables the user to select their preferred NEAR wallet in your dApp.

## Tokens and Primitives

- [What are Primitives?](https://docs.near.org/primitives/what-is) : Primitives are fundamental building blocks that can be combined to create a fully functional application. Blockchain primitives include Fungible Tokens (FT), Non Fungible Tokens (NFT), Decentralized Autonomous organizations (DAO), Link Drops and more.
- [Decentralized Autonomous Organizations](https://docs.near.org/primitives/dao) : Decentralized Autonomous Organizations (DAOs) are self-organized groups that form around common purposes. Membership, decision-making, and funding are coordinated by publicly voting on proposals through a smart contract.
- [Decentralized Exchanges (DEX)](https://docs.near.org/primitives/dex) : A Decentralized Exchange (DEX) is an application that allows users to trade tokens (native & fungible tokens) through smart contracts.
- [Fungible Tokens (FT)](https://docs.near.org/primitives/ft) : Besides the native NEAR token, NEAR accounts have access to a multitude of tokens to use throughout the ecosystem. Moreover, it is even possible for users to create their own fungible tokens.
- [Linkdrops](https://docs.near.org/primitives/linkdrop) : Linkdrops allow users to distribute assets and onboard people to Web3 apps through a simple web link.
- [Non-Fungible Tokens (NFT)](https://docs.near.org/primitives/nft) : In contrast with fungible tokens, non-fungible tokens (NFT) are unitary and therefore unique. This makes NFTs ideal to represent ownership of assets such as a piece of digital content, or a ticket for an event.
- [Oracles](https://docs.near.org/primitives/oracles) : Blockchain Oracles serve as intermediaries that connect smart contracts with external (off-chain) data.

## Developer Tools

- [Data APIs](https://docs.near.org/tools/ecosystem-apis) : If you are building a decentralized applications, chances are that you will need to query on-chain data. Since building a full indexer is not always feasible, the community has created a set of APIs that you can use to query data from the NEAR blockchain.
- [Clear Contract State](https://docs.near.org/tools/clear-state) : This simple command-line tool allows you to clean up the state of a NEAR account without deleting it.
- [Explorer](https://docs.near.org/tools/explorer) : Explorers are web applications that allows you to quickly obtain information from the blockchain through a friendly user interface: 1. Check the balance of an account 2. Search for a transactions and its receipts 3. Check the history of interactions in an account / contract 4. View block creations in real time Created by the community, NearBlocks enables to check accounts and transactions with an interface similar to etherscan.
- [FastNEAR](https://docs.near.org/tools/ecosystem-apis/fastnear-api) : FastNEAR allows to easily query the NEAR blockchain to get an accounts assets, map keys into account IDs, explore a blocks transactions, etc.
- [Indexing Solutions on NEAR](https://docs.near.org/tools/indexing-tools) : Indexers are services that are constantly listening to the blockchain, processing the transactions and storing them in a database that can be easily queried.
- [NEAR API](https://docs.near.org/tools/near-api) : The NEAR API is a collection of language-specific SDKs that allow developers to interact with the NEAR blockchain from both frontend and backend applications. These libraries enable you to: - Invoke view and call functions on deployed smart contracts - Query on-chain data such as account state, keys, balance - Create and manage NEAR accounts - Transfer tokens, including native NEAR, Fungible Tokens, Non-Fungible Tokens - Sign transactions/meta-transactions/messages and broadcasting them to the network - Deploy smart contracts Our API is available in multiple languages, including: - JavaScript/TypeScript: - @near-js/accounts - A collection of classes, functions, and types for interacting with accounts and contracts.
- [NEAR CLI](https://docs.near.org/tools/cli) : The NEAR Command Line Interface (CLI) is a tool that enables to interact with the NEAR network directly from the shell. Among other things, the NEAR CLI enables you to: - Create a new NEAR account - Query information about an account - Send Tokens such as NEAR, FTs, and NFTs - Create, Add and Delete Account Keys - Deploy a contract - Call functions on a deployed contract npm install -g near-cli-rs@latest $ cargo install near-cli-rs curl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/near-cli-rs/releases/latest/download/near-cli-rs-installer.sh | sh irm https://github.com/near/near-cli-rs/releases/latest/download/near-cli-rs-installer.ps1 | iex The directory with access keys and available connection networks are defined in the configuration file (near-cli/config.toml), which is located depending on the operating system in the following places: - macOS: $HOME/Library/Application Support (e.g. /Users/Alice/Library/Application Support) - Linux: $XDGCONFIGHOME or $HOME/.config (e.g. /home/alice/.config) - Windows: {FOLDERIDRoamingAppData} (e.g. C:\Users\Alice\AppData\Roaming) You can learn more about working with the configuration file here.
- [NEAR SDK](https://docs.near.org/tools/sdk) : The NEAR SDK is a library that allow to develop smart contracts. Currently, there exist two versions of NEAR SDK: one for Rust and one for JavaScript.
- [NearBlocks](https://docs.near.org/tools/ecosystem-apis/nearblocks-api) : NearBlocks provides an endpoint to query actions that happened on a NEAR account, possible use cases include: - Query an account balance - Query all function calls to specific contract - Get total NEAR supply and circulating supply - Query the number of total transactions on NEAR You can find the complete endpoint list in this page - Mainnet: https://api.nearblocks.io - Testnet: https://api-testnet.nearblocks.io NearBlocks API supports GET requests only.
- [Pikespeak](https://docs.near.org/tools/ecosystem-apis/pikespeak-api) : Pikespeak allows you to fetch blockchain events and aggregated analytics on wallets, validators, delegators, money transfers, dApps activity, and more.

## Tutorials and Examples

- [A Step-by-Step Guide to Mastering NEAR](https://docs.near.org/tutorials/auction/0-intro) : Welcome! In this guide we will help you navigate NEAR tech stack, so you can build Web3 applications from start to finish in no-time.
- [Abstract DAO: Requests](https://docs.near.org/tutorials/multichain-dao/1-request) : The Abstract DAO contract works as an intermediary between decentralized organizations in NEAR and EVM networks. To better understand how it works it is better to start by using it by itself, without using a DAO yet.
- [Abstract Dao: Signatures](https://docs.near.org/tutorials/multichain-dao/2-signing) : In the previous section, we saw how to register a signature request on the Abstract DAO contract. Now, it is time to sign the transaction for different chains and relay it to the target EVM network.
- [Add a simple frontend to the crossword puzzle that checks the solution's hash](https://docs.near.org/tutorials/crosswords/01-basics/04-simple-frontend) : This will be the final section in this chapter, where well add a simple frontend using React and near-api-js to communicate with the smart contract.
- [Adding a new puzzle now that we're using a collection that can contain multiple crossword puzzles](https://docs.near.org/tutorials/crosswords/02-beginner/04-adding-a-puzzle) : Were going to make a new puzzle, which means we need to provide the smart contract with a set of clues and info about the answers.
- [Adding cross-contract calls, access key shuffling, etc.](https://docs.near.org/tutorials/crosswords/03-intermediate/04-cross-contract-calls) : To reiterate, wed like anyone to be able to participate in the crossword puzzle, even folks who dont have a NEAR account.
- [Alter the smart contract, learning about basics of development](https://docs.near.org/tutorials/crosswords/01-basics/02-add-functions-call) : This section will modify the smart contract skeleton from the previous section. This tutorial will start by writing a contract in a somewhat useless way in order to learn the basics. Once weve got a solid understanding, well iterate until we have a crossword puzzle.
- [Approvals](https://docs.near.org/tutorials/nfts/5-approval) : In this tutorial youll learn the basics of an approval management system which will allow you to grant others access to transfer NFTs on your behalf.
- [Approvals](https://docs.near.org/tutorials/nfts/js/5-approval) : In this tutorial youll learn the basics of an approval management system which will allow you to grant others access to transfer NFTs on your behalf. This is the backbone of all NFT marketplaces and allows for some complex yet beautiful scenarios to happen. If youre joining us for the first time, feel free to clone this repository and checkout the 4.core branch to follow along.
- [Auction factory](https://docs.near.org/tutorials/auction/4-factory) : Since an auction contract hosts a single auction, each time you would like to host a new auction you will need to deploy a new contract. Rather than finding the compiled WASM file, creating a new account, deploying the contract, and then initializing it each time, you can use a factory contract to do this for you.
- [Basic Auction](https://docs.near.org/tutorials/auction/1.1-basic) : In this section, we will analyze a simple auction contract, which allows users to place bids, track the highest bidder and claim tokens at the end of the auction. After, we will cover how to test the contract, as well as how to deploy it on testnet.
- [Basics overview laying out what will be accomplished in this first section.](https://docs.near.org/tutorials/crosswords/01-basics/00-overview) : This first chapter of the crossword puzzle tutorial will introduce fundamental concepts to smart contract development in a beginner-friendly way. By the end of this chapter youll have a proof-of-concept contract that can be interacted with via NEAR CLI and a simple frontend that uses the near-api-js library.
- [Bidding with FTs](https://docs.near.org/tutorials/auction/3.2-ft) : To further develop this contract we will introduce another primitive: fungible tokens. Instead of placing bids in $NEAR tokens, they will be placed in FTs. This may be useful if, for example, an auctioneer wants to keep the bid amounts constant in terms of dollars as an auction is carried out, so bids can be placed in stablecoins such as $USDC. Another use case is if a project like Ref Finance was holding its own auction and wanted the auction to happen in its projects token $REF.
- [Coin Flip](https://docs.near.org/tutorials/examples/coin-flip) : Coin Flip is a game where the player tries to guess the outcome of a coin flip. It is one of the simplest contracts implementing random numbers.
- [Complex Cross Contract Call](https://docs.near.org/tutorials/examples/advanced-xcc) : This example presents 3 instances of complex cross-contract calls. Particularly, it shows: 1. How to batch multiple function calls to a same contract.

## API Reference

- [NEAR RPC API](https://docs.near.org/api/rpc/introduction) : The RPC API allows you to communicate directly with the NEAR network. For example, tools such as near-api are just abstractions making RPC calls.
- [Access Keys](https://docs.near.org/api/rpc/access-keys) : The RPC API enables you to retrieve information about an accounts access keys.
- [Accounts / Contracts](https://docs.near.org/api/rpc/contracts) : The RPC API enables you to view details about accounts and contracts as well as perform contract calls.
- [Block / Chunk](https://docs.near.org/api/rpc/block-chunk) : The RPC API enables you to query the network and get details about specific blocks or chunks.
- [Gas](https://docs.near.org/api/rpc/gas) : The RPC API enables you to query the gas price for a specific block or hash.
- [Maintenance Windows](https://docs.near.org/api/rpc/maintenance-windows) : The RPC API enables you to query future maintenance windows for a specific validator in current epoch
- [Network](https://docs.near.org/api/rpc/network) : The RPC API enables you to query status information for nodes and validators.
- [Protocol](https://docs.near.org/api/rpc/protocol) : The RPC API enables you to retrieve the current genesis and protocol configuration.
- [RPC Endpoints](https://docs.near.org/api/rpc/transactions) : The RPC API enables you to send transactions and query their status.
- [RPC Providers](https://docs.near.org/api/rpc/providers) : There are multiple RPC providers from which you can choose from. These providers will work as intermediaries to help you interact with the NEAR network.
- [Setup](https://docs.near.org/api/rpc/setup) : In order to use the RPC API you will need to setup the correct RPC endpoints. - POST for all methods - JSON RPC 2.0 - id: "dontcare" - endpoint URL varies by network: - mainnet https://rpc.mainnet.near.org - testnet https://rpc.testnet.near.org - betanet https://rpc.betanet.near.org (may be unstable) - localnet http://localhost:3030 - Maximum number of requests per IP: 600 req/min Querying historical data (older than 5 epochs or ~2.5 days), you may get responses that the data is not available anymore. In that case, archival RPC nodes will come to your rescue: - mainnet https://archival-rpc.mainnet.near.org - testnet https://archival-rpc.testnet.near.org You can see this interface defined in nearcore here.

## Data Infrastructure

- [What is Data Infrastructure?](https://docs.near.org/data-infrastructure/what-is) : NEAR offers ready-to-use solutions to access and monitor on-chain data easily. This is very useful to automate actions based on specific events, cache data to reduce latency, gather usage data of the blockchain, and even study user preferences.
- [`Block` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/block.mdx) : Block is the main entity in NEAR Protocol blockchain. Blocks are produced in NEAR Protocol every second.
- [`Chunk` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/chunk.mdx) : Chunk of a Block is a part of a Block from a Shard. The collection of Chunks of the Block forms the NEAR Protocol Block Chunk contains all the structures that make the Block: - Transactions - Receipts - ChunkHeader rust links=1 pub struct ChunkView { pub author: AccountId, pub header: ChunkHeaderView, pub transactions: Vec<IndexerTransactionWithOutcome>, pub receipts: Vec<ReceiptView>, ts links=1 export interface Chunk { author: string; header: ChunkHeader; transactions: IndexerTransactionWithOutcome[]; receipts: Receipt[], rust links=1 pub struct ChunkHeaderView { pub chunkhash: CryptoHash, pub prevblockhash: CryptoHash, pub outcomeroot: CryptoHash, pub prevstateroot: StateRoot, pub encodedmerkleroot: CryptoHash, pub encodedlength: u64, pub heightcreated: BlockHeight, pub heightincluded: BlockHeight, pub shardid: ShardId, pub gasused: Gas, pub gaslimit: Gas, /// TODO(2271): deprecated.
- [`ExecutionOutcome` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/execution_outcome.mdx) : ExecutionOutcome is the result of execution of Transaction or Receipt In the result of the Transaction execution will always be a Receipt.
- [`Receipt` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/receipt.mdx) : Receipt is an internal transaction in NEAR Protocol. rust links=1 pub struct ReceiptView { pub predecessorid: AccountId, pub receiverid: AccountId, pub receiptid: CryptoHash, pub receipt: ReceiptEnumView, ts links=1 export type Receipt = { predecessorId: string; receipt: ReceiptEnum; receiptId: string; receiverId: string; rust links=1 pub enum ReceiptEnumView { signerid: AccountId, signerpublickey: PublicKey, gasprice: Balance, outputdatareceivers: Vec<DataReceiverView>, inputdataids: Vec<CryptoHash>, actions: Vec<ActionView>, dataid: CryptoHash, data: Option<Vec<u8>>, ts links=1 export type ReceiptEnum = actions: Action[]; gasPrice: string; inputDataIds: string[]; outputDataReceivers: string[]; signerId: string; signerPublicKey: string; data: string; dataId: string; ActionReceipts hold info about what actions to perform. In the cross-contract calls some actions might happen only when specific data is available, such data is in the DataReceipts.
- [`Shard` structure](https://docs.near.org/data-infrastructure/lake-data-structures/shard.mdx) : IndexerShard struct is ephemeral structure, there is no such entity in nearcore. Weve introduces it as a container in near-indexer-primitives. This container includes: - Chunk that might be absent - ExecutionOutcomes for Receipts (these belong to a Shard not to a Chunk or a Block) - StateChanges for a Shard rust links=1 pub struct IndexerShard { pub shardid: types::ShardId, pub chunk: Option<IndexerChunkView>, pub receiptexecutionoutcomes: Vec<IndexerExecutionOutcomeWithReceipt>, pub statechanges: views::StateChangesView, ts links=1 export interface Shard { shardid: number; chunk?: Chunk; receiptExecutionOutcomes: ExecutionOutcomeWithReceipt[]; stateChanges: StateChange[];
- [`StateChange` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/state_change.mdx) : This entity from nearcore describes how accounts state has changed and the reason rust links=1 pub struct StateChangeWithCauseView { pub cause: StateChangeCauseView, pub value: StateChangeValueView, pub enum StateChangeCauseView { NotWritableToDisk, InitialState, TransactionProcessing { txhash: CryptoHash }, ActionReceiptProcessingStarted { receipthash: CryptoHash }, ActionReceiptGasReward { receipthash: CryptoHash }, ReceiptProcessing { receipthash: CryptoHash }, PostponedReceipt { receipthash: CryptoHash }, UpdatedDelayedReceipts, ValidatorAccountsUpdate, Resharding, pub enum StateChangeValueView { AccountUpdate { accountid: AccountId, account: AccountView, AccountDeletion { accountid: AccountId, AccessKeyUpdate { accountid: AccountId, publickey: PublicKey, accesskey: AccessKeyView, AccessKeyDeletion { accountid: AccountId, publickey: PublicKey, DataUpdate { accountid: AccountId, key: StoreKey, value: StoreValue, DataDeletion { accountid: AccountId, key: StoreKey, ContractCodeUpdate { accountid: AccountId, code: Vec<u8>, ContractCodeDeletion { accountid: AccountId, ts links=1 export type StateChange = { receiptHash: string; type: string; accountId: string; keyBase64: string; valueBase64: string; type: string;
- [`Transaction` Structure](https://docs.near.org/data-infrastructure/lake-data-structures/transaction.mdx) : Transaction is the main way of interaction between a user and a blockchain. Transaction contains: - Signer account ID - Receiver account ID Transaction might be unsigned but from the indexer perspective when we think about Transaction we think about signed one rust links=1 pub struct SignedTransactionView { pub signerid: AccountId, pub publickey: PublicKey, pub nonce: Nonce, pub receiverid: AccountId, pub actions: Vec<ActionView>, pub signature: Signature, pub hash: CryptoHash, ts links=1 export type Transaction = { signerId: string; publicKey: string; nonce: number; receiverId: string; actions: Action[]; signature: string; hash: string; ActionView is an Enum with possible actions along with parameters. This structure is used in Transactions and in Receipts rust links=1 pub enum ActionView { CreateAccount, DeployContract { code: String, FunctionCall { methodname: String, args: String, deposit: Balance, deposit: Balance, stake: Balance, publickey: PublicKey, publickey: PublicKey, accesskey: AccessKeyView, DeleteKey { publickey: PublicKey, DeleteAccount { beneficiaryid: AccountId, ts links=1 export type Action = | "CreateAccount" | DeployContractAction | FunctionCallAction | TransferAction | StakeAction | AddKeyAction | DeleteKeyAction | DeleteAccountAction; export type DeployContractAction = { DeployContract: { code: string; export type FunctionCallAction= { FunctionCall: { methodName: string; args: string; gas: number; deposit: string; export type TransferAction = { Transfer: { deposit: string; export type StakeAction = { stake: number; publicKey: string; export type AddKeyAction = { publicKey: string; accessKey: AccessKey; export type DeleteKeyAction = { DeleteKey: { publicKey: string; export type DeleteAccountAction = { DeleteAccount: { beneficiaryId: string;
- [BigQuery Public Dataset](https://docs.near.org/data-infrastructure/big-query) : Blockchain data indexing in NEAR Public Lakehouse is for anyone wanting to understand blockchain data. This includes: - Users: create queries to track NEAR assets, monitor transactions, or analyze on-chain events at a massive scale.
- [Building an NFT indexer](https://docs.near.org/data-infrastructure/lake-framework/building-indexers/nft-indexer) : near-examples/near-lake-nft-indexer: source code for this tutorial This tutorial ends with a working NFT indexer built on top NEAR Lake Framework JS. The indexer is watching for nftmint Events and prints some relevant data: - receiptId of the Receipt where the mint has happened - Marketplace - NFT owner account name - Links to the NFTs on the marketplaces The final source code is available on the GitHub near-examples/near-lake-nft-indexer NEAR Protocol had introduced a nice feature Events. The Events allow a contract developer to add standardized logs to the ExecutionOutcomes thus allowing themselves or other developers to read those logs in more convenient manner via API or indexers.

## Integration Examples

- [Introduction](https://docs.near.org/integrations/errors/introduction) : did you know? The NEAR Platform overview clarifies much of the language in this section. - A client creates a transaction, computes the transaction hash and signs this hash to get a signed transaction. Now this signed transaction can be sent to a node.
- [Accounts](https://docs.near.org/integrations/accounts) : Please see the documentation for accounts for basic information. - For exchanges, NEAR supports implicit account creation which allows the creation of accounts without paying for transactions.
- [Avoiding Token Loss](https://docs.near.org/integrations/errors/token-loss) : Careful! Losing tokens means losing money! Token loss is possible under multiple scenarios. These scenarios can be grouped into a few related classes: 1. Improper key management 2. Refunding deleted accounts 3. Failed function calls in batches Improper key management may lead to token loss. Mitigating such scenarios may be done by issuing backup keys allowing for recovery of accounts whose keys have been lost or deleted.
- [Balance changes](https://docs.near.org/integrations/balance) : - NEAR Account - NEAR-CLI - Credentials for sender account stored locally by running near login > Balance changes on accounts can be tracked by using our changes RPC endpoint. You can test this out by sending tokens to an account using NEAR-CLI and then viewing the changes made.
- [Create Transactions](https://docs.near.org/integrations/create-transactions) : To construct & process transactions you will need our API JavaScript library: near-api-js. There are many ways to create transactions but for this example well show you two ways to create a simple token transfer transaction.
- [Exchange Integration](https://docs.near.org/integrations/exchange-integration) : - Balance Changes - Accounts - Fungible Tokens - Implicit Accounts - Basics - Specifications - Constructing Transactions Some important pieces of information regarding blocks and finality include: - Expected block time is around 1s and expected time to finality is around 2s. The last final block can be queried by specifying {"finality": "final"} in the block query. For example, to get the latest final block on mainnet, one can run http post https://rpc.mainnet.near.org method=block params:='{"finality":"final"}' id=123 jsonrpc=2.0 - Block height are not necessarily continuous and certain heights may be skipped if, for example, a block producer for that height is offline. For example, after a block at height 100 is produced, the block at height 101 may be skipped. When block at height 102 is produced, its previous block is the block at height 100.
- [Fungible tokens](https://docs.near.org/integrations/tokens) : Please see the spec for the fungible token standard and an example implementation for reference details.
- [Implicit Accounts](https://docs.near.org/integrations/implicit-accounts) : Implicit accounts work similarly to Bitcoin/Ethereum accounts. - They allow you to reserve an account ID before its created by generating a ED25519 key-pair locally.
- [Integrator FAQ](https://docs.near.org/integrations/faq) : NEAR is a sharded, public, proof-of-stake blockchain and smart contract platform. It is built in Rust and contracts compile to WASM. It is conceptually similar to Ethereum 2.0.
- [Source Code Survey](https://docs.near.org/integrations/errors/error-implementation) : This page provides a very high level, sometimes "pseudocode", view of error types and related messages as implemented by the NEAR platform.

## Resources

- [Contracts List](https://docs.near.org/resources/contracts-list) : List of contracts of various projects deployed on NEAR. This list is not exhaustive and is meant to be a reference for developers and users NEAR Catalog - A catalog of NEAR projects NEAR Audit Database - List of Public Audits in the NEAR Ecosystem | Contract                                                                                        | Project                                            | Tags                             | Description                                                                                           | |-------------------------------------------------------------------------------------------------|----------------------------------------------------|----------------------------------|-------------------------------------------------------------------------------------------------------| | Burrow.finance (public archive)                       | Rhea finance          | DeFi                             | Lending platform                                                                                      | | ref-exchange             | Rhea finance          | DeFi                             | DEX Contract                                                                                          | | ref-farming               | Rhea finance          | DeFi                             | DEX LP Farming                                                                                        | | Meta Token                    | Metapool          | FT                               | FT contract                                                                                           | | metapool                        | Metapool          | staking                          | Liquid staking                                                                                        | | donation                        | PotLock            | FT, donation                     | Donating FT to any contract                                                                           | | pot                                  | PotLock            | donation                         | QF Funding round                                                                                      | | potfactory                  | PotLock            | factory, donation                | Factory contract for QF Funding Rounds                                                                | | registry                        | PotLock            | donation, misc                   | Registry for QF funding rounds                                                                        | | sybil                              | PotLock            | misc                             | Registry for sybil resistance providers                                                               | | ShardDog-NFT-Protocol                       | ShardDog                 | NFT                              | NFT contract managing multiple NFT collections                                                        | | NFT-Minting-withFT                             | ShardDog                 | NFT, FT                          | NFT contract supports minting with FT tokens, royalties, payment distribution, premint functionality. | | contest-contract                                 | ShardDog                 | raffle                           | Weighted raffle system.                                                                               | | core                                          | NEAR Intents      | cross-chain, DeFi                | Protocol for multichain financial products                                                            | | contest-contract    | Race of Sloths  | raffle                           | Weighted raffle contract                                                                              | | contract                    | Race of Sloths  | misc                             | Scoreboard including streaks                                                                          | | contract-mvp                                | Templar Protocol | DeFi                             | Permissionless cypher lending                                                                         | | index-fund-contract                  | Templar Protocol | DeFi                             | Index fund contract                                                                                   | | linear                  | Linear          | staking                          | Liquid staking                                                                                        | | hodl-lockup                                           | Sweat Economy     | FT, lockup                       | FT lockup contract                                                                                    | | sweat-jar                                               | Sweat Economy     | FT, staking                      | FT staking contract                                                                                   | | sweat-claim                        | Sweat Economy     | FT                               | FT managing contract                                                                                  | | sweat-booster                                       | Sweat Economy     | FT, NFT                          | NFT vouchers for FT                                                                                   | | multisig                                                 | Sweat Economy     | multisig                         | Multisig Contract                                                                                     | | sweat-burn                                             | Sweat Economy     | FT                               | FT burning                                                                                            | | mb-factory-v2               | MintBase/Bitte            | factory, NFT                     | NFT factory contract                                                                                  | | mb-interop-market       | MintBase/Bitte            | NFT                              | NFT Market contract                                                                                   | | mb-nft-v2                       | MintBase/Bitte            | NFT                              | NFT contract                                                                                          | | neardevhub-contract                       | NEAR DevHub         | misc                             | Community managing platform                                                                           | | lockup-factory             | Core-Contracts                                 | factory, lockup                  | Factory contract deploying lockup contracts                                                           | | lockup                             | Core-Contracts                                 | lockup                           | Locks and holds an owners tokens for a lockup period                                                 | | multisig-factory         | Core-Contracts                                 | factory                          | Factory contract for multisig                                                                         | | multisig                         | Core-Contracts                                 | multisig                         | multisig                                                                                              | | multisig2                       | Core-Contracts                                 | multisig                         | multisig                                                                                              | | staking-pool-factory | Core-Contracts                                 | factory, staking-pool, validator | Staking Pool factory contract                                                                         | | staking-pool                 | Core-Contracts                                 | staking-pool, validator          | Staking pool contract                                                                                 | | state-manipulation     | Core-Contracts                                 | state-manipulation               | Contracts state-manipulation                                                                          | | voting                             | Core-Contracts                                 | validator                        | Validator Voting contract                                                                             | | w-near                             | Core-Contracts                                 | FT                               | FT contract that wraps native NEAR                                                                    | | whitelist                       | Core-Contracts                                 | whitelist, staking-pool          | Whitelist contract for staking pools                                                                  |

